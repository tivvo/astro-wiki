{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction if you're landing on this page, i assume you need some guidance around my current avatar and some of it's features, with this specifically being the head system right now so hi! here's all the info that you actually need realistically please note, all headers will be included at the top of each head class along with the paramaters after in code blocks Quickstart - Formatting NOTE: all coup heads use this same formatting guide (json), and is done this way for ease of use when dealing with the actual heads, you can use toJson to just easily convert table with params Headers all headers control whatever the head will do, you actually don't need a header at the start of the head to control it as the ; (semi-colon) acts as a separator for the actual data of the head and the header itself this header does match 4p5's head format, with it being header;{data} , so all you need to do is input a valid type for this header i.e test; or test for the head to be registered with the function of that header your skull data would look something like this if you want to register it with the test header: SkullData: test; *or* SkullData: test Data data is controlled in a specific way, where you can easily pass a toJson and append it to the skull data with a table, this must always be parsed after the seperator semi-colon ; you can see the data available for every head in their pages specifically, and they will be listed like the following when available: example kill : Boolean Makes a confetti head explode other players within a 4 block vicinity, this does require the host of the head to be on however, as the kill command is ran by commands. Otherwise, it'll just summon the appear confetti effect on the players. this can be directly interpreted like most other tables in the following way: {kill=true} , with this you can then run a toJson call and encode it with base 64 after the header to the head, and it'll recognise that data afterwards i.e --- blah is a made up function for registering data heads with a header and then also data afterwards blah.RegisterHead(\"confetti\", toJson({kill=true})) no invalid param checking will be added, it'll just be ignored as it wont be used in the code ( except when said otherwise, but it's usually also ignored in that case too lmao )","title":"Introduction"},{"location":"#introduction","text":"if you're landing on this page, i assume you need some guidance around my current avatar and some of it's features, with this specifically being the head system right now so hi! here's all the info that you actually need realistically please note, all headers will be included at the top of each head class along with the paramaters after in code blocks","title":"Introduction"},{"location":"#quickstart-formatting","text":"NOTE: all coup heads use this same formatting guide (json), and is done this way for ease of use when dealing with the actual heads, you can use toJson to just easily convert table with params","title":"Quickstart - Formatting"},{"location":"#headers","text":"all headers control whatever the head will do, you actually don't need a header at the start of the head to control it as the ; (semi-colon) acts as a separator for the actual data of the head and the header itself this header does match 4p5's head format, with it being header;{data} , so all you need to do is input a valid type for this header i.e test; or test for the head to be registered with the function of that header your skull data would look something like this if you want to register it with the test header: SkullData: test; *or* SkullData: test","title":"Headers"},{"location":"#data","text":"data is controlled in a specific way, where you can easily pass a toJson and append it to the skull data with a table, this must always be parsed after the seperator semi-colon ; you can see the data available for every head in their pages specifically, and they will be listed like the following when available: example kill : Boolean Makes a confetti head explode other players within a 4 block vicinity, this does require the host of the head to be on however, as the kill command is ran by commands. Otherwise, it'll just summon the appear confetti effect on the players. this can be directly interpreted like most other tables in the following way: {kill=true} , with this you can then run a toJson call and encode it with base 64 after the header to the head, and it'll recognise that data afterwards i.e --- blah is a made up function for registering data heads with a header and then also data afterwards blah.RegisterHead(\"confetti\", toJson({kill=true})) no invalid param checking will be added, it'll just be ignored as it wont be used in the code ( except when said otherwise, but it's usually also ignored in that case too lmao )","title":"Data"},{"location":"confetti-head/","text":"Confetti Head confetti;{params} the confetti head is like the test head, wherein it spawns confetti when it's broken, and is customizable and has a funny feature that was added because of niko ( allbeit he has cursed us with this anyways ) Parameters particleAmount : Number The amount of particles that will spawn when the head is broken. This is currently capped at 24767 for reasons. (simon) speed : Number The speed at which the particles travel at. This will be sent in as the raw number itself, and no calculations will be applied to it. angle : Number The angle at which the particles travel at. his will be sent in as the raw number itself, and no calculations will be applied to it. speedOffset: Number Offsets the pre determined speed with this value. angleOffset: Number Offsets the angle of the pre determined angle with this value. kill : Boolean Makes a confetti head explode other players within a 4 block vicinity, this does require the host of the head to be on however, as the kill command is ran by commands. Otherwise, it'll just summon the appear confetti effect on the players.","title":"Confetti Head"},{"location":"confetti-head/#confetti-head","text":"confetti;{params} the confetti head is like the test head, wherein it spawns confetti when it's broken, and is customizable and has a funny feature that was added because of niko ( allbeit he has cursed us with this anyways )","title":"Confetti Head"},{"location":"confetti-head/#parameters","text":"particleAmount : Number The amount of particles that will spawn when the head is broken. This is currently capped at 24767 for reasons. (simon) speed : Number The speed at which the particles travel at. This will be sent in as the raw number itself, and no calculations will be applied to it. angle : Number The angle at which the particles travel at. his will be sent in as the raw number itself, and no calculations will be applied to it. speedOffset: Number Offsets the pre determined speed with this value. angleOffset: Number Offsets the angle of the pre determined angle with this value. kill : Boolean Makes a confetti head explode other players within a 4 block vicinity, this does require the host of the head to be on however, as the kill command is ran by commands. Otherwise, it'll just summon the appear confetti effect on the players.","title":"Parameters"},{"location":"test-head/","text":"Test Head test;{params} the test head is a simple head for testing that i originally made with the confetti particles, you can't really do much else with it Parameters N/A","title":"Test Head"},{"location":"test-head/#test-head","text":"test;{params} the test head is a simple head for testing that i originally made with the confetti particles, you can't really do much else with it","title":"Test Head"},{"location":"test-head/#parameters","text":"N/A","title":"Parameters"},{"location":"text-head/","text":"text Head text;{params} the text head does the obvious and displays text when placed down, this can be controlled via the paramaters this will always be offset by default to be directly where the head is placed, but you can control this with the pos parameter if you provide a broken text or a broken property, the text may be stuck loading or the property will simply not load, as this is all type checked IMPORTANT this is like, the only head with different formatting and you have to append it in a different way compared to the normal paramater adding ( this is for better organization for me, but this can be changed in future if it's annoying for people ) you will need to format your data in the following way {text=text, properties = {params}} i.e, a finalized text data with a gradient on it will look like the following: {text = \"This is an example!\", properties = {outline = true} also make sure to stringify all vector 3's cuz userdata blah json blah Parameters - Base text : String The text that will be displayed on the text task of the head. properties : Table The properties of the text task, all properties if valid will be applied to the TextTask. (see paramaters below) Paramaters - Properties color : Hex / Vector3 Sets the color of the text. Will auto-convert Vector3 into Hex. pos : Vector3 Set the position of the text. This will default to 0,0,0 though first, and then will set the position afterwards. size : Number Sets the size of the head via :setScale(), which will enlargen the TextTask outline : boolean Sets the outline of the text to the boolean value. outline_color: Hex / Vector3 Sets the outline color of the text. Will auto-convert Vector3 into Hex align : \"CENTER\" | \"LEFT\" | \"RIGHT\" Aligns the TextTask to the specificed values. gradient : table[Vector3, Vector3] Sets the gradient of the text task from the 1st value to the 2nd value. shadow : boolean Sets the shadow of the text to the boolean value. wrap : boolean Sets the wrap of the text to the boolean value. opacity : number Sets the opacity of the text task to the value. seeThrough : boolean Makes the TextTask seethrough based on the value.","title":"text Head"},{"location":"text-head/#text-head","text":"text;{params} the text head does the obvious and displays text when placed down, this can be controlled via the paramaters this will always be offset by default to be directly where the head is placed, but you can control this with the pos parameter if you provide a broken text or a broken property, the text may be stuck loading or the property will simply not load, as this is all type checked","title":"text Head"},{"location":"text-head/#important","text":"this is like, the only head with different formatting and you have to append it in a different way compared to the normal paramater adding ( this is for better organization for me, but this can be changed in future if it's annoying for people ) you will need to format your data in the following way {text=text, properties = {params}} i.e, a finalized text data with a gradient on it will look like the following: {text = \"This is an example!\", properties = {outline = true} also make sure to stringify all vector 3's cuz userdata blah json blah","title":"IMPORTANT"},{"location":"text-head/#parameters-base","text":"text : String The text that will be displayed on the text task of the head. properties : Table The properties of the text task, all properties if valid will be applied to the TextTask. (see paramaters below)","title":"Parameters - Base"},{"location":"text-head/#paramaters-properties","text":"color : Hex / Vector3 Sets the color of the text. Will auto-convert Vector3 into Hex. pos : Vector3 Set the position of the text. This will default to 0,0,0 though first, and then will set the position afterwards. size : Number Sets the size of the head via :setScale(), which will enlargen the TextTask outline : boolean Sets the outline of the text to the boolean value. outline_color: Hex / Vector3 Sets the outline color of the text. Will auto-convert Vector3 into Hex align : \"CENTER\" | \"LEFT\" | \"RIGHT\" Aligns the TextTask to the specificed values. gradient : table[Vector3, Vector3] Sets the gradient of the text task from the 1st value to the 2nd value. shadow : boolean Sets the shadow of the text to the boolean value. wrap : boolean Sets the wrap of the text to the boolean value. opacity : number Sets the opacity of the text task to the value. seeThrough : boolean Makes the TextTask seethrough based on the value.","title":"Paramaters - Properties"}]}